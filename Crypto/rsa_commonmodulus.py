from Crypto.Util.number import long_to_bytes, bytes_to_long, GCD
import gmpy2
from base64 import b64decode

def bytes_to_integer(data):
    output = 0
    size = len(data)
    for index in range(size):
        output |= data[index] << (8 * (size - 1 - index))
    return output

def integer_to_bytes(integer, _bytes):
    output = bytearray()
    for byte in range(_bytes):
        output.append((integer >> (8 * (_bytes - 1 - byte))) & 255)
    return output

def egcd(a, b):
    if (a == 0):
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def neg_pow(a, b, n):
    assert b < 0
    assert GCD(a, n) == 1
    res = int(gmpy2.invert(a, n))
    res = pow(res, b*(-1), n)
    return res

def common_modulus(e1, e2, n, c1, c2):
    g, a, b = egcd(e1, e2)
    if a < 0:
        c1 = neg_pow(c1, a, n)
    else:
        c1 = pow(c1, a, n)
    if b < 0:
        c2 = neg_pow(c2, b, n)
    else:
        c2 = pow(c2, b, n)
    ct = c1*c2 % n
    m = int(gmpy2.iroot(ct, g)[0])
    return m

n1 = 820588435386913690303480244069212230714965897750783915105610615249857010241975398974458185230742613230685280159093164809084808117917416618687866466665056582484488540530974569565440336634044634488978506257113190996471619709057217106416116135447818871613702932079605972391689763379727658802438199470269679205947044776602825869338932004050690069860227333327479130883589674034997826834078407730944147348688042376064557110079767760498747850726322630409570749794032164492474078850552030464255524799104458479000250489920211443653350609046283086208310014779215351776736622094775962010228946376577139688298151778258297908277
e1 = 345
c1 = 453238761814007444387732335800902876887849516164511983559971745409928991899296752199680235908924846157503840672271005253178398182532423487984888134985825103611155132536909451877183474115797972552509636439177829188694800150565472825758349770595348567359104727831783087313026207182792337116911861391391206189699056484726274664715964326187570514547121189274521648315615232537412209764035017670954598458333614657393053825944642126196157611162605020258182094140052178662561373399304901627853201242670253066710667446679094513356399328284195960222096684997519156391767425977234539131078088681617130770691226963557157465380
n2 = 11821497191514094087289089420653118061947424572304016571316639770201885145297723287596333963679774843942246721069948075803945318950144055418709001631931004555456964744390767448892636969795513502400223209321931760769215098385376897404966167468468816792240047067212058175306082292863048832970918351428634621430496364056108349317972641260822213373501421949780853680458622868452423211378253542574796085896044585983478042671193278280135417321659724991314381265389934574287687765563881928509772577754113381010804560998521282984486069442809379009268941754914656174728743262209813240539620236474818556898526131426911315467027
e2 = 627
c2 = 2401247936484126258877418861420973921401335761688619374961334440456542056070142728541996755406135768743193275619882872520339692366551206381590346098414061831255064719129039029246618805492781873930151660795696868623398126518866508654014449158840849442964960569633127090764316664209915724385813219116071912674969759670153209880475998050475394656955561327531532341547656388267476298113042521822798493830918985201856425726469393122935690033972934156489595653412281233869030278101896209920082859601190792551750179311598998466562101694505656011989302866025676732127833222917533108667549594298707075517024604491515596185784
n3 = 15048179155385008081201644077031751674316429159285914748940463951261518327412668716391426108969519390849423210195886338494322262027844820731496450085146365976890532531884919816975579845556633242811577567551289529956534603373713434297137450676744212579078098962513753135796791467566258096847666267460413139497777980703845261084370717666847573892660352843774648130368522544607473546736081294811355373134070665358757152093425874060680599469725937713274212966641558605143884036637194634765071461872524945020179590535416893702946650152440870897332934741910283231968184014527703012658366511020650339624580215064274297739057
e3 = 8151
c3 = 12770431346913961107051341965543861178202475371180637422741585815258485626702531775527775615259490011674631206315181913666798763112552328236259651763956695266314632847128234369004976838829849669144968744603860289942879857628178264361401765448876395007209502061566124319225146444176616596624081373157206306311641131448050801138954646837305891800149665725622338459632473494933118057145782252357722385128771889828663651293544149665376797305286342476895541951155666495817766833101254328040416581493369412110625655670591387485717139784746988001881791089366404519192427648379980235848424759820475759081297865217325947836629
n4 = 11821497191514094087289089420653118061947424572304016571316639770201885145297723287596333963679774843942246721069948075803945318950144055418709001631931004555456964744390767448892636969795513502400223209321931760769215098385376897404966167468468816792240047067212058175306082292863048832970918351428634621430496364056108349317972641260822213373501421949780853680458622868452423211378253542574796085896044585983478042671193278280135417321659724991314381265389934574287687765563881928509772577754113381010804560998521282984486069442809379009268941754914656174728743262209813240539620236474818556898526131426911315467027
e4 = 561
c4 = 1161052086010611248163302114138911108168773640756963174968202024645949184986933386775817747511786500600781641412052866871229252881714675289337737919097474979904582184913664167640113963838290849732298377361051744819516219072373163543460964899952601216428421823467062971193365398649188127719341185845081699312765059017163691937401688201162646309510279733095871496688891146282908830526654473970141123853331047145647068268311918302371943446192789599620040632723811874779488044100186512832512248128472738493816840212839252251404584787624534459685000252755632191450567780884671613219394645517206480531156490472797390436179
n5 = 820588435386913690303480244069212230714965897750783915105610615249857010241975398974458185230742613230685280159093164809084808117917416618687866466665056582484488540530974569565440336634044634488978506257113190996471619709057217106416116135447818871613702932079605972391689763379727658802438199470269679205947044776602825869338932004050690069860227333327479130883589674034997826834078407730944147348688042376064557110079767760498747850726322630409570749794032164492474078850552030464255524799104458479000250489920211443653350609046283086208310014779215351776736622094775962010228946376577139688298151778258297908277
e5 = 147
c5 = 477117612778195997796726976450209647469718945549295439376194593973376293380194425938335286930246894494111596012024468400767938150467933176627089949663869581052998517133758715709743451035846430541143323547228387394376425376944152503299377880270740275743173355189826428496652141260663345192101838032488341729294356912667344251930422161095176225595050267505760111608359451431935531208786672814787048055878120722477786422990706499269743342994677995446955630724248379635447843565999316620844017033020754228294464276669349325924163015494941522482244777869301871738287005060307887732692043436600011426034022025351044493766
n6 = 15048179155385008081201644077031751674316429159285914748940463951261518327412668716391426108969519390849423210195886338494322262027844820731496450085146365976890532531884919816975579845556633242811577567551289529956534603373713434297137450676744212579078098962513753135796791467566258096847666267460413139497777980703845261084370717666847573892660352843774648130368522544607473546736081294811355373134070665358757152093425874060680599469725937713274212966641558605143884036637194634765071461872524945020179590535416893702946650152440870897332934741910283231968184014527703012658366511020650339624580215064274297739057
e6 = 10701
c6 = 22052196236203353763800847951508605884146906102341138612201233299978643667308490884518408724742842526837866915995955773674760979717633834200007903833236756254825604791685971305893167128548673411693995232712042309699128323789838152991762062282823227443592095794153724432633123008979953105963072431264952435608819881861758258520611437493916187815344363985456039809034389678040416531962676738347631166990254728030500226876709009058698884554963446407946719690575747760339057477223974032913333909922928405570807813936798230436443659871157003805629875095076954583476076320417564846977166988121509629425088305833537454660
n7 = 11821497191514094087289089420653118061947424572304016571316639770201885145297723287596333963679774843942246721069948075803945318950144055418709001631931004555456964744390767448892636969795513502400223209321931760769215098385376897404966167468468816792240047067212058175306082292863048832970918351428634621430496364056108349317972641260822213373501421949780853680458622868452423211378253542574796085896044585983478042671193278280135417321659724991314381265389934574287687765563881928509772577754113381010804560998521282984486069442809379009268941754914656174728743262209813240539620236474818556898526131426911315467027
e7 = 969
c7 = 5770168508551646116630333139912059742256493027610754225245246232941581072888851740441559492033671299738485640523692351599499230737360780013314546859558299053730144482687941623602229655025815394367855554036582630320154670659918386970518427255787446163028130571672489852869186832035224232135790559064723851005336183325970545409777614496802819453123028835124406241635688548473846040180893217902943878369295832205125932623184230455196927126131555230305516966712534781544381308132944139870939702839998503264778809413745953193647279455334754602932370408524043182554624529068768636788985028721886689385591864768167412780993

assert(n1 == n5)
assert(n2 == n7)
assert(n3 == n6)
assert(n4 == n2)
assert(GCD(e1, e5) != 1)
assert(GCD(e2, e7) != 1)
assert(GCD(e3, e6) != 1)
assert(GCD(e4, e2) != 1)

parts = [
    common_modulus(e1, e5, n1, c1, c5),
    common_modulus(e2, e7, n2, c2, c7),
    common_modulus(e3, e6, n3, c3, c6),
    common_modulus(e4, e2, n4, c4, c2)
]

for p in parts:
    recovered = long_to_bytes(p)
    print("Recovered:", recovered)
